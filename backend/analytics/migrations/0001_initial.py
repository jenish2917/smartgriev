# Generated by Django 4.2.4 on 2025-07-27 05:59

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('complaints', '0002_complaint_area_type_complaint_gps_accuracy_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_name', models.CharField(max_length=100)),
                ('metric_value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('server_node', models.CharField(max_length=50, null=True)),
                ('metadata', models.JSONField(default=dict)),
            ],
            options={
                'indexes': [models.Index(fields=['metric_name', 'timestamp'], name='analytics_p_metric__7ddac3_idx')],
            },
        ),
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('metric_type', models.CharField(max_length=50)),
                ('condition_type', models.CharField(choices=[('threshold', 'Threshold'), ('percentage_change', 'Percentage Change'), ('anomaly', 'Anomaly Detection')], max_length=20)),
                ('threshold_value', models.FloatField(null=True)),
                ('comparison_operator', models.CharField(max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('notification_channels', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AlertInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('triggered_value', models.FloatField()),
                ('message', models.TextField()),
                ('severity', models.CharField(default='medium', max_length=20)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(null=True)),
                ('triggered_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(default=dict)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analytics.alertrule')),
            ],
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(max_length=50)),
                ('endpoint', models.CharField(max_length=255, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('duration', models.FloatField(null=True)),
                ('response_code', models.IntegerField(null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'timestamp'], name='analytics_u_user_id_54ee7d_idx'), models.Index(fields=['activity_type', 'timestamp'], name='analytics_u_activit_f59ac3_idx')],
            },
        ),
        migrations.CreateModel(
            name='RealTimeMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('complaint_count', 'Complaint Count'), ('resolution_rate', 'Resolution Rate'), ('avg_response_time', 'Average Response Time'), ('satisfaction_score', 'Satisfaction Score'), ('department_performance', 'Department Performance'), ('geographic_distribution', 'Geographic Distribution'), ('sentiment_trends', 'Sentiment Trends'), ('chatbot_effectiveness', 'Chatbot Effectiveness')], max_length=50)),
                ('metric_value', models.JSONField()),
                ('time_period', models.CharField(max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(default=dict)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='complaints.department')),
            ],
            options={
                'indexes': [models.Index(fields=['metric_type', 'timestamp'], name='analytics_r_metric__3fbba0_idx'), models.Index(fields=['department', 'metric_type'], name='analytics_r_departm_4087db_idx')],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('dashboard_type', models.CharField(choices=[('citizen', 'Citizen Dashboard'), ('officer', 'Officer Dashboard'), ('admin', 'Admin Dashboard'), ('department', 'Department Dashboard')], max_length=20)),
                ('widgets', models.JSONField(default=list)),
                ('layout', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'name')},
            },
        ),
    ]
